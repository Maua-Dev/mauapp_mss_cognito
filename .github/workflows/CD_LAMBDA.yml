name: CD_lambda

on:
  push:
    branches:
      - dev
      - homolog
      - main


jobs:

  DeployToAWS:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # setar python para 3.9
      - name: Setup Python
        uses: actions/setup-python@v2.3.1
        with:
          python-version: 3.9.6

      # configurar venv
      - name: Create Virtual Enviroment
        run: python -m venv venv
      - name: Install Dependencies
        run: |
          source venv/bin/activate; \
          pip install -r requirements.txt \

      - name: Get Root Directory
        id: root_directory
        run: echo "::set-output name=name::$(pwd)"
     # ROOT:  ${{ steps.root_directory.outputs.name }}

      - name: Zip the app
        run:  | 
          mkdir function; \
          cp -R src function; \
          cp -R venv/lib/python3.9/site-packages/* function; \
          cd function; \
          zip -r function.zip *; 
          mv function.zip  ${{ steps.root_directory.outputs.name }}\

      - name: Setup Enviroments
        uses: jannekem/run-python-script-action@v1
        id: setup_env
        env:
          SECRETS: ${{ toJson(secrets) }}
        with:
          script: |
            import os
            import json
            print(os.environ['SECRETS']['AWS_REGION_DEV'])
            stage = os.environ['GITHUB_REF_NAME'].upper()
            set_output('AWS_ACCESS_KEY_ID', os.environ[f'AWS_ACCESS_KEY_ID_{stage}'])
            set_output('AWS_SECRET_ACCESS_KEY', os.environ[f'AWS_SECRET_ACCESS_KEY_{stage}'])
            set_output('S3_BUCKET', os.environ[f'S3_BUCKET_{stage}'])
            set_output('AWS_REGION', os.environ[f'AWS_REGION_{stage}'])
        
            

      

      - name: Configure AWS Credentials (DEV)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ steps.setup_env.outputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ steps.setup_env.outputs.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.setup_env.outputs.AWS_REGION }}

      - name: Upload zip on S3 Bucket
        run: aws s3 cp function.zip s3://${{ steps.setup_env.outputs.S3_BUCKET }}/${{ github.event.repository.name }}/function.zip # HARD CODED


    # Atualizar lambda
      - name: Update Lambda Source Code
        run: aws lambda update-function-code --function-name ${{ github.event.repository.name }} --s3-bucket ${{ steps.setup_env.outputs.S3_BUCKET }} --s3-key ${{ github.event.repository.name }}/function.zip



